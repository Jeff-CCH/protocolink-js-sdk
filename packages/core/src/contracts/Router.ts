/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IParam {
  export type InputStruct = {
    token: PromiseOrValue<string>;
    balanceBps: PromiseOrValue<BigNumberish>;
    amountOrOffset: PromiseOrValue<BigNumberish>;
  };

  export type InputStructOutput = [string, BigNumber, BigNumber] & {
    token: string;
    balanceBps: BigNumber;
    amountOrOffset: BigNumber;
  };

  export type LogicStruct = {
    to: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    inputs: IParam.InputStruct[];
    wrapMode: PromiseOrValue<BigNumberish>;
    approveTo: PromiseOrValue<string>;
    callback: PromiseOrValue<string>;
  };

  export type LogicStructOutput = [string, string, IParam.InputStructOutput[], number, string, string] & {
    to: string;
    data: string;
    inputs: IParam.InputStructOutput[];
    wrapMode: number;
    approveTo: string;
    callback: string;
  };

  export type FeeStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    metadata: PromiseOrValue<BytesLike>;
  };

  export type FeeStructOutput = [string, BigNumber, string] & {
    token: string;
    amount: BigNumber;
    metadata: string;
  };

  export type LogicBatchStruct = {
    logics: IParam.LogicStruct[];
    fees: IParam.FeeStruct[];
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type LogicBatchStructOutput = [IParam.LogicStructOutput[], IParam.FeeStructOutput[], BigNumber] & {
    logics: IParam.LogicStructOutput[];
    fees: IParam.FeeStructOutput[];
    deadline: BigNumber;
  };
}

export interface RouterInterface extends utils.Interface {
  functions: {
    'addSigner(address)': FunctionFragment;
    'agentImplementation()': FunctionFragment;
    'agents(address)': FunctionFragment;
    'calcAgent(address)': FunctionFragment;
    'currentUser()': FunctionFragment;
    'domainSeparator()': FunctionFragment;
    'execute((address,bytes,(address,uint256,uint256)[],uint8,address,address)[],address[],uint256)': FunctionFragment;
    'executeWithSignature(((address,bytes,(address,uint256,uint256)[],uint8,address,address)[],(address,uint256,bytes32)[],uint256),address,bytes,address[],uint256)': FunctionFragment;
    'feeCalculators(bytes4,address)': FunctionFragment;
    'feeCollector()': FunctionFragment;
    'getAgent(address)': FunctionFragment;
    'getCurrentUserAgent()': FunctionFragment;
    'getFeeCalculator(bytes4,address)': FunctionFragment;
    'getLogicsAndMsgValueWithFee((address,bytes,(address,uint256,uint256)[],uint8,address,address)[],uint256)': FunctionFragment;
    'getLogicsWithFee((address,bytes,(address,uint256,uint256)[],uint8,address,address)[])': FunctionFragment;
    'getMsgValueWithFee(uint256)': FunctionFragment;
    'getNativeFeeCalculator()': FunctionFragment;
    'newAgent(address)': FunctionFragment;
    'newAgent()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'pauser()': FunctionFragment;
    'removeSigner(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rescue(address,address,uint256)': FunctionFragment;
    'setFeeCalculator(bytes4,address,address)': FunctionFragment;
    'setFeeCalculators(bytes4[],address[],address[])': FunctionFragment;
    'setFeeCollector(address)': FunctionFragment;
    'setPauser(address)': FunctionFragment;
    'signers(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addSigner'
      | 'agentImplementation'
      | 'agents'
      | 'calcAgent'
      | 'currentUser'
      | 'domainSeparator'
      | 'execute'
      | 'executeWithSignature'
      | 'feeCalculators'
      | 'feeCollector'
      | 'getAgent'
      | 'getCurrentUserAgent'
      | 'getFeeCalculator'
      | 'getLogicsAndMsgValueWithFee'
      | 'getLogicsWithFee'
      | 'getMsgValueWithFee'
      | 'getNativeFeeCalculator'
      | 'newAgent(address)'
      | 'newAgent()'
      | 'owner'
      | 'pause'
      | 'pauser'
      | 'removeSigner'
      | 'renounceOwnership'
      | 'rescue'
      | 'setFeeCalculator'
      | 'setFeeCalculators'
      | 'setFeeCollector'
      | 'setPauser'
      | 'signers'
      | 'transferOwnership'
      | 'unpause'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addSigner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'agentImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'agents', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'calcAgent', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'currentUser', values?: undefined): string;
  encodeFunctionData(functionFragment: 'domainSeparator', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'execute',
    values: [IParam.LogicStruct[], PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeWithSignature',
    values: [
      IParam.LogicBatchStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'feeCalculators',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'feeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAgent', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCurrentUserAgent', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getFeeCalculator',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getLogicsAndMsgValueWithFee',
    values: [IParam.LogicStruct[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'getLogicsWithFee', values: [IParam.LogicStruct[]]): string;
  encodeFunctionData(functionFragment: 'getMsgValueWithFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getNativeFeeCalculator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'newAgent(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'newAgent()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauser', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeSigner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rescue',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeCalculator',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeCalculators',
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: 'setFeeCollector', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setPauser', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'signers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'agentImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'agents', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calcAgent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'domainSeparator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeWithSignature', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeCalculators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAgent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentUserAgent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeeCalculator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLogicsAndMsgValueWithFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLogicsWithFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMsgValueWithFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNativeFeeCalculator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'newAgent(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'newAgent()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rescue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeCalculator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeCalculators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'signers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;

  events: {
    'AgentCreated(address,address)': EventFragment;
    'Execute(address,address,uint256)': EventFragment;
    'FeeCalculatorSet(bytes4,address,address)': EventFragment;
    'FeeCollectorSet(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused()': EventFragment;
    'PauserSet(address)': EventFragment;
    'SignerAdded(address)': EventFragment;
    'SignerRemoved(address)': EventFragment;
    'Unpaused()': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AgentCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Execute'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeCalculatorSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeCollectorSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauserSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SignerAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SignerRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface AgentCreatedEventObject {
  agent: string;
  user: string;
}
export type AgentCreatedEvent = TypedEvent<[string, string], AgentCreatedEventObject>;

export type AgentCreatedEventFilter = TypedEventFilter<AgentCreatedEvent>;

export interface ExecuteEventObject {
  user: string;
  agent: string;
  referralCode: BigNumber;
}
export type ExecuteEvent = TypedEvent<[string, string, BigNumber], ExecuteEventObject>;

export type ExecuteEventFilter = TypedEventFilter<ExecuteEvent>;

export interface FeeCalculatorSetEventObject {
  selector: string;
  to: string;
  feeCalculator: string;
}
export type FeeCalculatorSetEvent = TypedEvent<[string, string, string], FeeCalculatorSetEventObject>;

export type FeeCalculatorSetEventFilter = TypedEventFilter<FeeCalculatorSetEvent>;

export interface FeeCollectorSetEventObject {
  feeCollector_: string;
}
export type FeeCollectorSetEvent = TypedEvent<[string], FeeCollectorSetEventObject>;

export type FeeCollectorSetEventFilter = TypedEventFilter<FeeCollectorSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {}
export type PausedEvent = TypedEvent<[], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PauserSetEventObject {
  pauser: string;
}
export type PauserSetEvent = TypedEvent<[string], PauserSetEventObject>;

export type PauserSetEventFilter = TypedEventFilter<PauserSetEvent>;

export interface SignerAddedEventObject {
  signer: string;
}
export type SignerAddedEvent = TypedEvent<[string], SignerAddedEventObject>;

export type SignerAddedEventFilter = TypedEventFilter<SignerAddedEvent>;

export interface SignerRemovedEventObject {
  signer: string;
}
export type SignerRemovedEvent = TypedEvent<[string], SignerRemovedEventObject>;

export type SignerRemovedEventFilter = TypedEventFilter<SignerRemovedEvent>;

export interface UnpausedEventObject {}
export type UnpausedEvent = TypedEvent<[], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSigner(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    agentImplementation(overrides?: CallOverrides): Promise<[string]>;

    agents(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & { agent: string }>;

    calcAgent(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    currentUser(overrides?: CallOverrides): Promise<[string]>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    execute(
      logics: IParam.LogicStruct[],
      tokensReturn: PromiseOrValue<string>[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeWithSignature(
      logicBatch: IParam.LogicBatchStruct,
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      tokensReturn: PromiseOrValue<string>[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeCalculators(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { feeCalculator: string }>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    getAgent(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getCurrentUserAgent(overrides?: CallOverrides): Promise<[string, string]>;

    getFeeCalculator(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { feeCalculator: string }>;

    getLogicsAndMsgValueWithFee(
      logics: IParam.LogicStruct[],
      msgValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IParam.LogicStructOutput[], BigNumber]>;

    getLogicsWithFee(logics: IParam.LogicStruct[], overrides?: CallOverrides): Promise<[IParam.LogicStructOutput[]]>;

    getMsgValueWithFee(msgValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getNativeFeeCalculator(overrides?: CallOverrides): Promise<[string] & { nativeFeeCalculator: string }>;

    'newAgent(address)'(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    'newAgent()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    removeSigner(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rescue(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeCalculator(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      feeCalculator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeCalculators(
      selectors: PromiseOrValue<BytesLike>[],
      tos: PromiseOrValue<string>[],
      feeCalculators_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      feeCollector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPauser(
      pauser_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & { valid: boolean }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  addSigner(
    signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  agentImplementation(overrides?: CallOverrides): Promise<string>;

  agents(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  calcAgent(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  currentUser(overrides?: CallOverrides): Promise<string>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  execute(
    logics: IParam.LogicStruct[],
    tokensReturn: PromiseOrValue<string>[],
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeWithSignature(
    logicBatch: IParam.LogicBatchStruct,
    signer: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    tokensReturn: PromiseOrValue<string>[],
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeCalculators(
    selector: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  getAgent(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getCurrentUserAgent(overrides?: CallOverrides): Promise<[string, string]>;

  getFeeCalculator(
    selector: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLogicsAndMsgValueWithFee(
    logics: IParam.LogicStruct[],
    msgValue: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[IParam.LogicStructOutput[], BigNumber]>;

  getLogicsWithFee(logics: IParam.LogicStruct[], overrides?: CallOverrides): Promise<IParam.LogicStructOutput[]>;

  getMsgValueWithFee(msgValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getNativeFeeCalculator(overrides?: CallOverrides): Promise<string>;

  'newAgent(address)'(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  'newAgent()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  pauser(overrides?: CallOverrides): Promise<string>;

  removeSigner(
    signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rescue(
    token: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeCalculator(
    selector: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    feeCalculator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeCalculators(
    selectors: PromiseOrValue<BytesLike>[],
    tos: PromiseOrValue<string>[],
    feeCalculators_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    feeCollector_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPauser(
    pauser_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    addSigner(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    agentImplementation(overrides?: CallOverrides): Promise<string>;

    agents(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    calcAgent(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    currentUser(overrides?: CallOverrides): Promise<string>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    execute(
      logics: IParam.LogicStruct[],
      tokensReturn: PromiseOrValue<string>[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeWithSignature(
      logicBatch: IParam.LogicBatchStruct,
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      tokensReturn: PromiseOrValue<string>[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeCalculators(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    getAgent(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getCurrentUserAgent(overrides?: CallOverrides): Promise<[string, string]>;

    getFeeCalculator(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLogicsAndMsgValueWithFee(
      logics: IParam.LogicStruct[],
      msgValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IParam.LogicStructOutput[], BigNumber]>;

    getLogicsWithFee(logics: IParam.LogicStruct[], overrides?: CallOverrides): Promise<IParam.LogicStructOutput[]>;

    getMsgValueWithFee(msgValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getNativeFeeCalculator(overrides?: CallOverrides): Promise<string>;

    'newAgent(address)'(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    'newAgent()'(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauser(overrides?: CallOverrides): Promise<string>;

    removeSigner(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescue(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCalculator(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      feeCalculator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCalculators(
      selectors: PromiseOrValue<BytesLike>[],
      tos: PromiseOrValue<string>[],
      feeCalculators_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(feeCollector_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPauser(pauser_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AgentCreated(address,address)'(
      agent?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null
    ): AgentCreatedEventFilter;
    AgentCreated(agent?: PromiseOrValue<string> | null, user?: PromiseOrValue<string> | null): AgentCreatedEventFilter;

    'Execute(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      agent?: PromiseOrValue<string> | null,
      referralCode?: PromiseOrValue<BigNumberish> | null
    ): ExecuteEventFilter;
    Execute(
      user?: PromiseOrValue<string> | null,
      agent?: PromiseOrValue<string> | null,
      referralCode?: PromiseOrValue<BigNumberish> | null
    ): ExecuteEventFilter;

    'FeeCalculatorSet(bytes4,address,address)'(
      selector?: PromiseOrValue<BytesLike> | null,
      to?: PromiseOrValue<string> | null,
      feeCalculator?: PromiseOrValue<string> | null
    ): FeeCalculatorSetEventFilter;
    FeeCalculatorSet(
      selector?: PromiseOrValue<BytesLike> | null,
      to?: PromiseOrValue<string> | null,
      feeCalculator?: PromiseOrValue<string> | null
    ): FeeCalculatorSetEventFilter;

    'FeeCollectorSet(address)'(feeCollector_?: PromiseOrValue<string> | null): FeeCollectorSetEventFilter;
    FeeCollectorSet(feeCollector_?: PromiseOrValue<string> | null): FeeCollectorSetEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Paused()'(): PausedEventFilter;
    Paused(): PausedEventFilter;

    'PauserSet(address)'(pauser?: PromiseOrValue<string> | null): PauserSetEventFilter;
    PauserSet(pauser?: PromiseOrValue<string> | null): PauserSetEventFilter;

    'SignerAdded(address)'(signer?: PromiseOrValue<string> | null): SignerAddedEventFilter;
    SignerAdded(signer?: PromiseOrValue<string> | null): SignerAddedEventFilter;

    'SignerRemoved(address)'(signer?: PromiseOrValue<string> | null): SignerRemovedEventFilter;
    SignerRemoved(signer?: PromiseOrValue<string> | null): SignerRemovedEventFilter;

    'Unpaused()'(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;
  };

  estimateGas: {
    addSigner(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    agentImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    agents(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    calcAgent(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    currentUser(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      logics: IParam.LogicStruct[],
      tokensReturn: PromiseOrValue<string>[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeWithSignature(
      logicBatch: IParam.LogicBatchStruct,
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      tokensReturn: PromiseOrValue<string>[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeCalculators(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getAgent(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentUserAgent(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeCalculator(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLogicsAndMsgValueWithFee(
      logics: IParam.LogicStruct[],
      msgValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLogicsWithFee(logics: IParam.LogicStruct[], overrides?: CallOverrides): Promise<BigNumber>;

    getMsgValueWithFee(msgValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getNativeFeeCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    'newAgent(address)'(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    'newAgent()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    removeSigner(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rescue(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeCalculator(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      feeCalculator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeCalculators(
      selectors: PromiseOrValue<BytesLike>[],
      tos: PromiseOrValue<string>[],
      feeCalculators_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      feeCollector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPauser(
      pauser_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    addSigner(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    agentImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    agents(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcAgent(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      logics: IParam.LogicStruct[],
      tokensReturn: PromiseOrValue<string>[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeWithSignature(
      logicBatch: IParam.LogicBatchStruct,
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      tokensReturn: PromiseOrValue<string>[],
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeCalculators(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAgent(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentUserAgent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeCalculator(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLogicsAndMsgValueWithFee(
      logics: IParam.LogicStruct[],
      msgValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLogicsWithFee(logics: IParam.LogicStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMsgValueWithFee(
      msgValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNativeFeeCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'newAgent(address)'(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    'newAgent()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSigner(
      signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rescue(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCalculator(
      selector: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      feeCalculator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCalculators(
      selectors: PromiseOrValue<BytesLike>[],
      tos: PromiseOrValue<string>[],
      feeCalculators_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      feeCollector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPauser(
      pauser_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
